 //동기 비동기 콜백함수 https://pro-self-studier.tistory.com/89
 //https://www.zerocho.com/category/NodeJS/post/58285e4840a6d700184ebd87
 
 2강 node.js와 express.js

 nodejs는 javascript를 브라우저가 아닌 server side에서도
 javascript를 사용하는 언어       https://nodejs.org/ko/

 expressjs는 nodejs의 프레임워크  https://expressjs.com/ko/starter/hello-world.html

 npm 패키지를 만들기위 해서 터미널에서 npm init 친다 => package.json이 만들어짐
 지금은 node모듈이 없음

 express를 다운받기 위해서 npm install express --save를 하면
 package.json에 디펜던시에 express가 추가되며, node_moudules이 만들어진다.

---------------------------------------------------------------------------------------
const express = require('express')  //express modules를 가져온다
const app = express() //express 함수를 이용해서 새로운 express app을 만들고
const port = 5000     //포트번호

//  https://uhou.tistory.com/102 req객체와 res객체
// '/'는 보내는 주소
// req 는 말그대로 요청을 하는것이고
// res 는 값읕 반환해준다고 생각을 하면된다.
// 따라서 "/"는 주소이고 res를 통해서 hello wrold!를 보여준다
app.get('/', (req, res) => {
  res.send('Hello World!')
})


//포트번호 5000번에서 만들어진 app를 실행한다.
app.listen(port, () => {
  console.log(`http://localhost:${port}`)
})

실행을 하기 위해서는 node index.js를 커맨드창에서 쳐서 사용하든가
package.json에 script에 "start": "node index.js"를 추가하여
npm run start 라고 커맨드에 쳐서 사용이 가능하다.

------------------------------------------------------------------
 3강 몽고 db연결

 몽고db 유저 생성 => 아이디랑 비밀번호를 기억해두어야 나중에 앱과 연결이 가능
ex) 'mongodb+srv://JWTEX:TIGER@jwt-rkkz2.mongodb.net/<dbname>?retryWrites=true&w=majority'
                  <아이디>:<비밀번호>

https://mongoosejs.com/docs/index.html //몽구스 시작페이지
https://mongoosejs.com/docs/deprecations.html //use 설정에대한 설명이 있음

mongoose 알아보기 //https://mongoosejs.com/ 
간단하게 몽고db를 편하게 쓸수 있게 해줌

npm install mongoose --save 를 통해서 설치가능
=> package.json에 mongoose 생기는거 확인

----------------------------------------------------------------

4장  MongoDB 모델과 스키마
https://www.zerocho.com/category/MongoDB/post/59a1870210b942001853e250

모델이란 무엇? 모델은 스키마를 감싸주는 역할
A Mongoose model is a wrapper on the Mongoose schema.
Mongoose model provides an interface to the 
database for creating, querying, updating, deleting records, etc.

스키마란 무엇? 
A Mongoose schema defines the structure of the 
document, default values, validators, etc.,

------------------------------------------------------------------

7장 BodyParser & PostMan & 회원 가입 기능
Clinet - Server 통신하는 법

//구글에 Request with Body  the JSON, buffer, string and URL encoded data 검색해보기

Express를 통한 Client와 Server의 통신에는
Requset 안에 Body가 있는데 JSON형식이나 urlencode형식으로 데이터가 넘오오는데
Body 데이터를 분석(parse)해서 req.body로 출력해주는것
분석해주기 위해서는 Body-parser라는 디펜던시가 필요하다
npm install body-parser --save
          
// req 는 말그대로 요청을 하는것이고
// res 는 값읕 반환해준다고 생각을 하면된다.

----------------------------------------------------
9장 비밀 설정 정보 관리하기 (정리부족)
개발환경과 배포환경의 차이두기


-----------------------------------------------------
10장 Bcrypt로 비밀번호를 암호화 하기

Bcrypt가 아닌 Bcryptjs로 진행하였음.
aws배포시 bcrypt 에러가 있어서


암호화를 하기위해서는 register 라우트에 있는 
save메소드 이전에서 암호화를 해줘야한다. 
=> 데이터 베이스에 암호화된 패스워드가 save됨
bcrypt로 암호화를 해줘야한다. 


----------------------------------------------

13장 Auth 기능 만들기 (어려움 다시 들어야할듯?)
Auth 기능이 필요한 이유
1.페이지 이동 떄마다 로그인되어있는지 안되어 있는지, 관리자유저인지등을 체크
2. 글을 쓰떄나 지울떄 같은데 권한이 있는지 확인

이전에 토큰을 생성한 다음에 데이터베이스 user정보에 넣어었다.

그리고 토큰을 클라이언트쪽에는 쿠키에다가도 넣어주었고
서버에는 유저 데이터베이스에 넣어주었다.

이 두가지 토큰이 맞는지 계속 체크를 한다.
어떤 유저가 a페이지에서 b페이지로 갔을때 유저가 a페이지에서 b페이지로 갈 수 있는 사람인지 확인


클라이언트에서 서버에 쿠키에 담겨져 있는 토큰을 전달한다.
토큰이 인코드 되어있는데 이를 디코드 하면 user id가 나오는데
인코드를 함 var token = jwt.sign(user._id.toHexString(), 'secretToken')

user id를 가진 유저 데이터베이스에 같은 토큰이 있다면 인증이 맞다.

--------------------------------------------------------------------
1. Cookie에서 저장된 Token을 Server에서 가져와서 복호화를 한다

2.복호화를 하면 User ID가 나오는데 그 User ID를 이용해서 
데이터 베이스 User Collection에서 유저를 찾은 후 
쿠키에서 받아온 token이 유저도 갖고있는지 확인한다.

3. Authentication True !!! 그리고 그 해당 하는 유저의 정보들을 
선별해서 (아이디, 이미지, 등등) 프론트 엔드로 보내준다.

---------------------------------------------------------

15장 리액트란?

리액트는 컴포넌트로 이뤄져있어서 module과 비슷하게 재사용성이 뛰어나다.

Virtual DOM은 Real DOM과 
같은 properties들을 갖고 있으면 그냥 가볍게 Real DOM을 
Copy한거라 보면 된다 !


Real DOM
1. 만약 10개의 리스트가 있다.
2. 그중에 한가지의 리스트만 Update 됨
3. 전체 리스트를 다시 Reload 해야됨 !
4. Super Expensive한 작업!


Virtual DOM
1. 만약 10개의 리스트가 있다.
2. 그중에 한가지의 리스트만 Update 됨
3.그 바뀐 한 가지 아이템만 
DOM에서 바꿔준다!
4. HOW !!! ????

1.JSX(우선 HTML으로 알아두기)
을 렌더링 한다.
그러면 Virtual DOM이 Update가 됨

2. Virtual DOM이  
이전 virtual DOM에서 찍어둔 Snapshot과
 비교를 해서 바뀐 부분을 찾는다

3. Virtual DOM이  
이전 virtual DOM에서 찍어둔 Snapshot과
비교를 해서 바뀐 부분을 찾는다
이 과정을 "diffing"이라고 부름

4. 그 바뀐 부분만 Real DOM에서 바꿔준다 !


--------------------------------------------------------

16장 Create-react-app으로 리액트 시작하기

Babel이란?
최신 자바스크립트 문법을 지원하지 않는 브라우저들을 위해서 
최신 자바스크립트 문법을 구형 브라우저에서도 돌수있게 변환 시켜줌.
구형 문법을 ES5문법으로 변환시켜준다.

Webpack이란?
많은 모듈들을 합하여서 간단하게 사용할수 있게 해준다.

clinet 폴더로 터미널을 이용해서 들어가서 

npx create-react-app . 을 해주는데

.의 의미는 clinet 디렉토리 안에다가 설치하게다.


----------------------------------------------------
17강 npm과 npx의 차이점(나~~~~~중에 한번 더 듣고 공부하기)
npm이란 무엇인가? 빌드??




---------------------------------------------------------
Clinet 폴더 구조
19페이지 한번 보기

_actions
_ruducer => redux를 위한 폴더들

componenets/views 이 안에는 page들을 넣는다

componenets/views/Sections 이 안에는 해당 페이젱 관련된
css파일이나, componenet들을 넣는다

app.js routing 관련 일을 처리한다

config.js -> 현경변수를 설정한다.

utils -> 여러 군데에서 쓰일수 있는 것들을
이곳에 넣어서 어디서든 쓸수 있게 해줌

hoc -> higherOrderComponent의 야갖로

여기서 해당 유저가 해당 페이지에 들어갈 자격이 되는지
알아 낸 후에 자격이 된다면 가게 해주고
아니라면 다른 페이지로 보내버린다.

hoc(auth)는 함수이고 다른 컴포넌트를 포함하고 있는 함수이다.

확장 프로그램으로 es7을 다운로드 받으면 rfce로 함수형 컴포넌트를 쉽게 만들수 있다.

----------------------------------------------------------------------

20강 React Router Dom

리액트에서는 페이지를 이동을 할 때
react router dom이라는것을 사용한다.

react router dom   //https://reactrouter.com/web/example/basic

사용하기 위해서는 clinet루트에 들어가서
npm install react-router-dom --save를 이용해서 다운 받는다.

App.js(라우팅을 위한 일처리를 하는곳)
 {/*exact path랑 그냥 path의 차이점은 무엇인가?*/}


//npm ci를 자주쓰자! 깔끔하다



------------------------------------------------------
21강 데이터 Flow & Axios

전체적인 데이터 흐름을 알아본다.


          Request
          <------
 SERVER               Clinet
          ------>
  !  ↑    Response
  !  !
  ↓  !

DATA BASE

예를 들어보자!
한유저가 로그인을 하고싶어서 Cinet에서 아이디와 비밀번호를 넣으면
클라이언트의 요청이 서버에가서 서버에서는 데이터베이스에 유저아이디가
있는지 먼저 찾고 만약에 있으면은 보내준 비밀번호가 유저아이디에
맞게 비밀번호가 맞는지 체크하는 역활을 하고 맞다면 그 결과를 클라이언트에 보내준다.

요청을 보낼떄는 
axios라는 라이브러리를 사용해서 보낼것이다. 

npm install axios --save

그리고 서버는 여기서는 5000번 포트를 사용하고 서버는 3000번 포트를 사용한다.
따라서 cors이슈, proxy설정을 해주어야한다.

---------------------------------------

22강 CORS이슈, Proxy설정



          Request
          <------
 Server               Clinet
          ------>
          Response
 port:5000            port:3000   

이렇게 두개의 다른 포트를 가지고 있는 서버는 아무 설정없이
Requset 요청을 보낼수 없다.
왜????

Cors정책 때문에
Cross-Origin Resuurce Sharing 보안을 위해서
여기서 Origin은 하나의 3000번 5000번을 의미한다.

이것을 해결하는데는 여러가지 방법이 있다
그중에 이번에는 Proxy 사용 하는 방법으로 해결!

https://create-react-app.dev/docs/proxying-api-requests-in-development/


//-------------------------------------------------
23장 proxy server?

1.아이피를 proxyserver에서 임의로 바꿔 버릴수 있다.
2. 보내는 데이터도 임의로 바꿀수 있다.

--------------------------------------------------
24장 클라이언트와 백서버 동시에 키기

https://medium.com/@krpeppermint100/react%EC%99%80-express-%EA%B0%9C%EB%B0%9C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0-concurrently-c22ef870226a

-----------------------------------------------
25장

CSS FRAMEWORK 종류 FOR REACT JS

1. Material UI

2.React Bootstrap

3.Semantic UI

4.Ant Design  -- 이걸 사용할 예정   https://ant.design
clinet루트에서 npm install antd --save
index에 스타일시트를 추가한다.
import 'antd/dist/antd.css';

5. Materialize


-----------------------------------------------------------
//26장 Redux 기초
Redux is a predictable state container for JavaScript apps.
(상태 관리 라이브러리)

Props와 State 비교하기

Props는 properties의 줄임말
부모 컴포넌트가 있고 자식컴포넌트가 있을 떄 컴포넌트 간의 무언가를 주고 받을때는 
Props를 써야하고, 
Props의 소통하는 방식은 위에서 아래로 
즉, 부모컴포넌트에서 자식컴포넌트 로만 전송이 가능하다.

부모 컴포넌트에서 자식컴포넌트로 1이라는 값을 줬을때 
자식컴포넌트 안에서는 props는 변할수 없다. props는 읽기전용이다.()
props는 불변성일 지니고 있다. 1이 바뀔라면 다시 부모컴포넌트에서 값을 바꿔야한다.

State
State는 부모컴포넌트에서 자식컴포넌트로 주는게 아니고,
컴포넌트 안에서 데이터를 교환하거나 전달을 할 떄 state를 사용해야한다.
state를 언제든지 변할수 있다. state가 변하면 re-render가 된다.


Redux는 State를 관리하는 것






Redux 데이터 Flow(strict unidirectional data flow) 한방향으로 데이터가 흐른다.

React Component -> Dispatch(action) -> Action -> REDUCER -> STORE -> Subscribe -> 다시 React Component로 간다.

Action은 객체로 이루어져있는데 무엇이 일어났는지 설명하는 객체이다.
//동영상 7분 10초

Reducer는 이전 State와 Action object를 받은 후에 next state를 return 한다.
(previousState, aciont) => nextState


Store는 state를 저장하고 관리한다. 
store의 state를 변경하기 위해서는 반드시 Dispatch를 이용한 Redux 데이터 Flow를 통해서만
변경이 가능하다.


------------------------------------------------------------------

//Redux UP!! 27강
React에서 사용하기 위해서 Client(리액트) 터미널로 가서
1. redux
2. react-redux

3. redux-promise
4. redux-thunk

3,4 디펜던시들은 미들웨어임


npm install redux react-redux redux-promise redux-thunk --save 를 설치한다.
redux-promise 
redux-thunk

redux store는 모든 state를 관리하게 되는데
store의 state를 변경하기 위해서는 반드시 Dispatch를 이용한 Redux 데이터 Flow를 통해서만
변경이 가능하다.


//2분 18초 다시 한번 들어보기
Action은 객체형식이여야 한다. 그래야 STORE에서 받을수 있는데, 
항상 객체형식을 받는게 아니라 promise형식이나 funcion을 받을때도 있다.
redux-promise와 redux-thunk를 미들웨이로로 받아서 전달한다.
redux-thunk는 funcion을 받을수 있게해주고,
redux-promise를 promise를 받을수 있게해준다.

https://velog.io/@jeonghoheo/Basic-Redux-%EC%9A%94%EC%95%BD

-----------------------------------------------------------------


//28강 React Hooks(다시 듣기)
Class Component는 제공하는 기능이 많고, 코드가 길어지고, 복잡해지고, 속도가 느려진다.
Funcion Component는 제공하는 기능이 적고, 코드가 줄어들고, 간결해지며, 속도가 빨라진다.

Class Component를 이용할 때 
Mounting과정에서 constructor -> render -> componentDidMount 과정이 일어나고,
Updating에서는 render -> componentDidUpdate의 과정이 일어나고,
Unmounting과정에서는 componentWillUnMount 과정이 일어난다.
따라서 Class 컴포넌트를 이용하다가
react hooks가 업데이트가 되고나서 Class Component에서만 제공된 기능들인
라이프사이클, setState 같은것을 함수형 컴포넌트에서도 사용이 가능해졌다.

class형 component에서는 constructor를 통해서 state를 생성하고, 여러 기능을 통해 변경하였으나
react-hooks의 useState를 통해서 state의 변경 및 생성이 가능해졌다.


componentDidMount(페이지가 생성될 떄)를 이용해서 데이터를 가져오거나 여러가지 기능을 했으나,
hook의 useEffect를 이용해서 똑같이 사용이 가능해졌다.



















//33장 인증체크
페이지는 권한을 통해서 여러가지로 나눌수 있는데
예를 들면 아무나 진입 가능한 페이지, 로그인한 회원만 진입 가능한 페이지,
로그인 한 회원은 진입 못하는 페이지, 관리자만 진입 가능한 페이지 등으로 나눌 수 있다.

HOC는 함수이다. 함수지만 다른 컴포넌트를 받은 다음에 새로운 컴포넌트를 리턴하는 함수이다.


Auth(HOC)는 Backend 서버에 요청(request)을 보내고 상태정보를 가지고 Auth(HOC)로 가지고 온다.
상태정보는 로그인유저인지, 관리자인지 같은 것을 의미한다.







EC2 배포 및 NGINX
https://www.youtube.com/watch?v=HtWgb_vbyvY

해로쿠 배포
https://www.youtube.com/watch?v=qdoiwouykAg
